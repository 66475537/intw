package com.cn.hsd.rm.result.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSON;
import com.cn.hsd.rm.factors.service.IBiRiskFactorsService;
import com.cn.hsd.rm.flight.service.FlightService;
import com.cn.hsd.rm.result.model.BiResultData;
import com.cn.hsd.rm.result.model.NodeTree;
import com.cn.hsd.rm.result.service.IBiResultDataService;
import com.cn.hsd.rm.util.DateUtil;

@Controller
@RequestMapping("/result")
public class BiResultDataController {
    
    @Autowired
    private IBiResultDataService resultDataService;
    
    @Autowired
    private FlightService flightService;
    
    @Autowired
    private IBiRiskFactorsService service;

    @RequestMapping("/toTree")
    public String toTree(){
        return "testtree";
    }

    @ResponseBody
    @RequestMapping("/tree")
    public String tree (String fltNo) throws Exception {
        List<BiResultData> tree = resultDataService.getTree("G54949");
        return JSON.toJSONString(tree);
    }
    
    @RequestMapping("/toNewTree")
    public String toNewTree(String fltNo, Model model){
        
        Map<String, Object> conditionMap = null;
        List<Map<String, Object>> resultMapList = null;
        String airMembers = null;
        try {
            //初始化并设置查询条件
            conditionMap = new HashMap<String, Object>();
            conditionMap.put("fltNo", fltNo);
            resultMapList = this.flightService.getFlightRiskResultDetailsList(conditionMap);
            if (resultMapList != null && !resultMapList.isEmpty()) {
                for (Map<String, Object> map: resultMapList) {
                    airMembers = this.flightService.getAirMembers(map);
                    map.put("AIR_MEMBER", airMembers);
                }
            }
            model.addAttribute("resultMapList", resultMapList);
        } catch (Exception e) {
            System.out.println(e);
        }
        
        model.addAttribute("fltNo", fltNo);
        return "/resultTree";
    }
    
    @ResponseBody
    @RequestMapping("/newTree")
    public String newTree(String fltNo){
        NodeTree newTree = this.resultDataService.newTree(fltNo);
        newTree.getRelationship().setParent_num(0);
        return JSON.toJSONString(newTree);
    }
    
    @ResponseBody
    @RequestMapping("/changeTserminalVal")
    public String changeTserminalVal(Integer flag){
        
        try {
            this.resultDataService.updateTserminalVal(flag);
            this.service.treeNode("G54949", DateUtil.getNowTime(DateUtil.DATE_SMALL_STR));
            return "1";
        } catch (Exception e) {
            return "-1";
        }
        
    }
}

